package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name="Drive Gripper 2", group="Exercises")
public class DriveWithGripper2 extends LinearOpMode {
    DcMotor leftDrive, rightDrive, armMotor;
    CRServo intakeServo;
    Servo wristServo;

    @Override
    public void runOpMode() {
        // Initialize hardware
        leftDrive = hardwareMap.dcMotor.get("left_drive");
        rightDrive = hardwareMap.dcMotor.get("right_drive");
        armMotor = hardwareMap.dcMotor.get("arm_motor");
        intakeServo = hardwareMap.get(CRServo.class, "intake_servo");
        wristServo = hardwareMap.servo.get("wrist_servo");

        // Reverse motor directions if necessary
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        rightDrive.setDirection(DcMotor.Direction.FORWARD);

        telemetry.addData("Mode", "waiting");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {
            // Gamepad 1 controls: Driving
            double drive = -gamepad1.left_stick_y; // Forward/backward
            double turn = gamepad1.right_stick_x; // Rotation
            double leftPower = Range.clip(drive + turn, -1.0, 1.0);
            double rightPower = Range.clip(drive - turn, -1.0, 1.0);

            leftDrive.setPower(leftPower);
            rightDrive.setPower(rightPower);

            // Gamepad 2 controls: Arm, intake, wrist, and hang
            // Arm up/down with left joystick
            double armPower = -gamepad2.left_stick_y;
            armMotor.setPower(armPower);

            // Intake collect (left trigger) and deposit (right trigger)
            if (gamepad2.left_trigger > 0) {
                intakeServo.setPower(1.0); // Collect
            } else if (gamepad2.right_trigger > 0) {
                intakeServo.setPower(-1.0); // Deposit
            } else {
                intakeServo.setPower(0); // Stop intake if no triggers are pressed
            }

            // Wrist control with D-pad
            if (gamepad2.dpad_left) {
                wristServo.setPosition(0.2); // Rotate wrist left
            } else if (gamepad2.dpad_right) {
                wristServo.setPosition(0.8); // Rotate wrist right
            } else if (gamepad2.dpad_up) {
                wristServo.setPosition(0.5); // Set wrist straight
            }

            // Hang mechanism with 'A' button
            if (gamepad2.a) {
                // Code for hanging mechanism (depends on hardware specifics)
                // Placeholder code (customize as needed)
                telemetry.addData("Hang", "Activated");
            }

            // Telemetry feedback
            telemetry.addData("left power", leftDrive.getPower());
            telemetry.addData("right power", rightDrive.getPower());
            telemetry.addData("arm power", armMotor.getPower());
            telemetry.addData("intake power", intakeServo.getPower());
            telemetry.update();

            idle(); // Always call idle() at the end of each loop iteration
        }
    }
}
